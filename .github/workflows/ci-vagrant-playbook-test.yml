name: "ci: Vagrant playbooks test"

on:
  workflow_dispatch: # Allows manual trigger of the workflow
  schedule:
    - cron: "30 5 * * */3" # Scheduled to run every three months at 5:30 AM
  pull_request: # Triggered on pull request events for the specified branches
    branches:
      - main

jobs:
  ci-vagrant-playbook-test:
    if: ${{ !startsWith(github.head_ref, 'renovate/') }} # Checks if the source branch starts with "renovate/"
    runs-on: ubuntu-22.04
    env:
      VAGRANT_DIR: ~/.vagrant.d/boxes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Checks out the repository code for use in actions, ensuring actions can interact with repository content

      - name: Install Dependencies for this to run
        run: |
          sudo apt update
          sudo apt -y install apt-transport-https ca-certificates curl software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install -y virtualbox virtualbox-dkms vagrant python3-pip
          vagrant plugin install vagrant-vbguest
          vagrant plugin install vagrant-disksize

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-apt-
        # Caches the downloaded apt packages to save time and bandwidth on subsequent runs

      - name: Install requirements for Python and Ansible
        run: |
          pip install -r requirements.txt
          ansible-galaxy install -r requirements.yml --force

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            ${{ runner.os }}-pip-
        # Caches the downloaded Python packages to save time and bandwidth on subsequent runs

      - name: Prepare Ansible playbook for testing
        run: cp setup-playbook.yml testing/being_tested.yml
        # Copies the setup-playbook.yml to the testing directory and renames it for test execution

      - name: Inject vars_files into Playbook
        run: |
          cat testing/being_tested.yml
          sed -i '/any_errors_fatal: true/a \
            vars_files:\
              - vars.yml'  testing/being_tested.yml
          cat testing/being_tested.yml

      - name: Remove blocking lines from testing/being_tested.yml for vagrant testing
        run: |
          sed -i '/sshd_allow_users:/d' testing/being_tested.yml
          sed -i '/sshd_allow_groups:/d' testing/being_tested.yml

      - name: Run vagrant up
        run: vagrant up
        # Initializes and provisions the Vagrant environment as defined in Vagrantfile

      - name: SSH into the box after boot
        run: |
          vms=$(vagrant status | grep 'running (' | cut -d' ' -f1)

          for vm in $vms; do
              echo "Running command on VM: $vm"
              vagrant ssh $vm -c "echo 'hello world!'"
          done
        # Tests SSH into the Vagrant boxex and runs a simple echo command to ensure functionality

      - name: Cache Vagrant boxes
        uses: actions/cache@v4
        with:
          path: ${{ env.VAGRANT_DIR }}
          key: ${{ runner.os }}-vagrant-${{ hashFiles('**/Vagrantfile') }}
          restore-keys: |
            ${{ runner.os }}-vagrant-
        # Caches the downloaded Vagrant boxes to save time and bandwidth on subsequent runs

      - name: Clean up Vagrant session
        run: vagrant halt && vagrant destroy -f
        if: always()
        # Gracefully shuts down and cleans up the Vagrant environment, ensuring no resources are left running
